// File Name: A.cpp
// Author: YangYue
// Created Time: Sat Jun 28 23:59:17 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 1000005;
const double eps = 1e-8;
const double DINF = 1e100;
const int INF = 1000000006;
const LL LINF = 1000000000000000005ll;


class FixedDiceGameDiv1 {
public:
	double f[55][2505], g[55][2505];
	void update(double &x, double v) {
		x += v;
	}
	double getExpectation(int a, int b, int c, int d) {
		if (a * b <= c) return -1;
		g[0][0] = f[0][0] = 1;
		for (int i = 0; i < c; ++i)
		for (int j = 0; j < c * d; ++j) {
			double p = 1. / d;
			for (int t = 1; t <= d; ++t) {
				update(g[i+1][j+t], g[i][j] * p);
			}
		}
		for (int i = 0; i < a; ++i)
		for (int j = 0; j < a * b; ++j) {
			double p = 1. / b;
			for (int t = 1; t <= b; ++t) {
				update(f[i+1][j+t], f[i][j] * p);
			}
		}
		double ans = 0;
		double p = 0;
		double tot = 0;
		for (int i = 1; i <= a * b; ++i) {
			p += g[c][i-1];
			ans += i * f[a][i] * p;
			tot += f[a][i] * p;
		}
		return ans / tot;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, int p3, bool hasAnswer, double p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << p3;
	cout << "]" << endl;
	FixedDiceGameDiv1 *obj;
	double answer;
	obj = new FixedDiceGameDiv1();
	clock_t startTime = clock();
	answer = obj->getExpectation(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = fabs(p4 - answer) <= 1e-9 * max(1.0, fabs(p4));
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	double p4;
	
	{
	// ----- test 0 -----
	p0 = 1;
	p1 = 2;
	p2 = 1;
	p3 = 5;
	p4 = 2.0;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 1;
	p2 = 1;
	p3 = 3;
	p4 = 3.0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1;
	p1 = 5;
	p2 = 1;
	p3 = 1;
	p4 = 3.4999999999999996;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 2;
	p1 = 6;
	p2 = 50;
	p3 = 30;
	p4 = -1.0;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 50;
	p1 = 11;
	p2 = 50;
	p3 = 50;
	p4 = 369.8865999182022;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// hehe ~


