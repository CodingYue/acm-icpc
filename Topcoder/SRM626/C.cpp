// File Name: C.cpp
// Author: YangYue
// Created Time: Sun Jun 29 01:03:44 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 1000005;
const double eps = 1e-8;
const double DINF = 1e100;
const int INF = 1000000006;
const LL LINF = 1000000000000000005ll;
const int MOD = (int) 1e9 + 7;

class ReflectiveRectangle {
public:
	int m, N;
	long long res;
	vector<int> pr;
	LL f(long long n) {
		return (2 * n + 1) * (n + 1) % MOD * n % MOD * 166666668 % MOD;
	}
	void dfs(int k, int now, int miu) {
		if (k >= m) {
			res = (res + (LL) miu * f(N / now) % MOD * now % MOD * now % MOD + MOD) % MOD;
			return;
		}
		dfs(k + 1, now, miu);
		dfs(k + 1, now * pr[k], miu * -1);
	}
	LL solve(LL n) {
		N = n;
		LL x = n;
		for (LL t = 2; t * t <= x; ++t) if (x % t == 0) {
			pr.push_back(t);
			while (x % t == 0) x /= t;
		}
		if (x > 1) pr.push_back(x);
		m = pr.size();
		res = 0;
		dfs(0, 1, 1);
		return res;
	}
	int findSum(int sideA, int sideB, int bounces) {
		long long A = sideA;
		long long B = sideB;
		if (bounces % 2 == 1) return 0;
		return (A*A+B*B) % MOD * solve(bounces + 2) % MOD;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2;
	cout << "]" << endl;
	ReflectiveRectangle *obj;
	int answer;
	obj = new ReflectiveRectangle();
	clock_t startTime = clock();
	answer = obj->findSum(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	int p2;
	int p3;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 4;
	p2 = 0;
	p3 = 25;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 3;
	p2 = 2;
	p3 = 180;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 13;
	p1 = 17;
	p2 = 1;
	p3 = 0;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 59325;
	p1 = 31785;
	p2 = 262142;
	p3 = 48032850;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1000000;
	p1 = 1000000;
	p2 = 1000000000;
	p3 = 145972110;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// hehe ~


