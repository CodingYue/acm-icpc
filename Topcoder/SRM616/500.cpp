// File Name: 500.cpp
// Author: YangYue
// Created Time: Thu Apr 10 23:55:56 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 1000005;
const double eps = 1e-8;
const double DINF = 1e100;
const int INF = 1000000006;
const LL LINF = 1000000000000000005ll;

class ColorfulCoins {
public:
	int f[55];
	bool can[55][55];
	int tmp[55];
	bool check(int i, int j, vector<LL> values) {
		int cnt = 0;
		for (int k = j; k >= i; --k) {
			++cnt;
			tmp[k] = cnt * values[k];
		}
		LL now = 0;
		for (int k = i; k <= j; ++k) {
			now += tmp[k];
			if (k < j && now >= values[k+1]) return false;
		}
		return true;
	}
	void update(int &x, int v) {
		if (x == -1) x = v;
		else x = min(x, v);
	}
	int minQueries(vector <long long> values) {
		int n = values.size();
		for (int i = 0; i < n; ++i) {
			//can[i][j] ?
			ULL now = 0;
			for (int j = i; j < n; ++j) if (check(i, j, values)) can[i][j] = 1;
		}
		int res = 0;
		memset(f, -1, sizeof f);
		f[0] = 0;
		for (int i = 0; i < n; ++i) if (f[i] != -1) {
			for (int j = i; j < n; ++j) if (can[i][j]) {
				update(f[j+1], f[i] + 1);
			}
		}
		return f[n];
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <long long> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	ColorfulCoins *obj;
	int answer;
	obj = new ColorfulCoins();
	clock_t startTime = clock();
	answer = obj->minQueries(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <long long> p0;
	int p1;
	
	{
	// ----- test 0 -----
	long long t0[] = {1ll, 4, 12};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	long long t0[] = {1ll,3ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	long long t0[] = {1ll,2ll,4ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	long long t0[] = {1ll,2ll,4ll,8ll,16ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	long long t0[] = {1ll,2ll,6ll,30ll,90ll,270ll,810ll,2430ll,7290ll,29160ll,87480ll,262440ll,787320ll,3149280ll,9447840ll,28343520ll,56687040ll,170061120ll,510183360ll,1530550080ll,3061100160ll,9183300480ll,27549901440ll,82649704320ll,247949112960ll,1239745564800ll,3719236694400ll,14876946777600ll,44630840332800ll,223154201664000ll,669462604992000ll,2008387814976000ll,6025163444928000ll,12050326889856000ll,24100653779712000ll,72301961339136000ll,289207845356544000ll,867623536069632000ll};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// hehe ~


