// File Name: A.cpp
// Author: YangYue
// Created Time: Fri Sep  5 18:59:21 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 1000005;
const double eps = 1e-8;
const double DINF = 1e100;
const int INF = 1000000006;
const LL LINF = 1000000000000000005ll;
class PotentialArithmeticSequence {
public:
	int a[55];
	bool check(int a, int b) {
		int res = 0;
		for (; a; a >>= 1) if (a & 1) {
			break;
		} else ++res;
		return res == b;
	}
	int numberOfSubsequences(vector <int> d) {
		int n = d.size();
		int res = 0;
		for (int i = 0; i < n; ++i) printf("%d ", d[i]);
		puts("");
		for (int i = 0; i < n; ++i)
		for (int j = i; j < n; ++j) {
			int cnt = 0;
			int pos = -1;
			for (int k = i; k <= j; ++k) if (d[k] > 7) {
				++cnt;
				pos = k;
			}
			if (cnt >= 2) continue;
			if (cnt == 1) {
				a[pos] = 1<<30;
				for (int k = pos - 1; k >= i; --k) a[k] = a[k+1] - 1;
				for (int k = pos + 1; k <= j; ++k) a[k] = a[k-1] + 1;
				bool yes = 1;
				for (int k = i; k <= j; ++k) if (k != pos && !check(a[k], d[k])) {
					yes = 0;
				}
				if (yes) ++res;
			} else {
				for (a[i] = 1; a[i] <= 512; ++a[i]) if (check(a[i], d[i])) {
					bool yes = 1;
					for (int k = i+1; k <= j; ++k) {
						a[k] = a[k-1] + 1;
						if (!check(a[k], d[k])) yes = 0;
					}
					if (yes) {
						++res;
						break;
					}
				}
			}
		}
		return res;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	PotentialArithmeticSequence *obj;
	int answer;
	obj = new PotentialArithmeticSequence();
	clock_t startTime = clock();
	answer = obj->numberOfSubsequences(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	
	{
	// ----- test 0 -----
	int t0[] = {0,1,0,2,0,1,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 28;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0,0,0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 7;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,0,0,1,1,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 8;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,100,0,2,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 11;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {1,11,3,0,1,0,1,0,1,0,1,0,3,0,2,0,0,0,0,1,2,3,20};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 49;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
