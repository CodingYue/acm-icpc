// File Name: B.cpp
// Author: YangYue
// Created Time: Mon Jul 28 14:35:40 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;


const int MaxN = 1000005;
const double eps = 1e-8;
const double DINF = 1e100;
class SquareDivisor {
public:
	LL mysqrt(LL x) {
		LL l = 1, r = 1e18+10;
		while (l + 1 < r) {
			LL mid = (l + r) >> 1;
			if (mid > x) { r = mid; continue; }
			if (mid * mid > x) r = mid; else l = mid;
		}
		return l;
	}
	bool check(LL x) {
		LL y = mysqrt(x);
		return y * y == x;
	}
	long long biggest(long long n) {
		long long res = 0;
		for (long long x = 1; x <= 1000000; ++x) if (n % x == 0) {
			if (check(n / x)) res = max(res, n / x);
			if (check(x)) res = max(res, x);
		}
		return res;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	SquareDivisor *obj;
	long long answer;
	obj = new SquareDivisor();
	clock_t startTime = clock();
	answer = obj->biggest(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 999950890999656188ll;
	p1 = 106276ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 100ll;
	p1 = 100ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 2014ll;
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 999999875021574338ll;
	p1 = 499999937510787169ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 999999998000000002ll;
	p1 = 1ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	{
	// ----- test 4 -----
	p0 = 987654321ll*987654321ll+1;
	p1 = 987654321ll*987654321ll;
	all_right = KawigiEdit_RunTest(5, p0, true, p1) && all_right;
	// ------------------
	}
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING

// hehe ~


