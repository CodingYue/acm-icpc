// File Name: 500.cpp
// Author: YangYue
// Created Time: Tue Jul 22 19:26:51 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 100005;
const double eps = 1e-8;
const double DINF = 1e100;
const int INF = 1000000006;
const LL LINF = 1000000000000000005ll;

class CircuitsConstruction {
public:
	int tot;
	int val[MaxN];
	int f[MaxN];
	char str[MaxN];
	char *s;
	vector<int> edges[MaxN];
	void add(int a, int b) {
		edges[a].push_back(b);
	}
	int solve() {
		int idx = ++tot;
		if (*s == 'A') {
			++s;
			val[idx] = 0;
		} else
		if (*s == 'B') {
			++s;
			val[idx] = 1;
		} else {
			++s;
			val[idx] = 2;
			return idx;
		}
		int l = solve();
		int r = solve();
		add(idx, l);
		add(idx, r);
		return idx;
	}
	void dfs(int u) {
		if (edges[u].size() == 0) return;
		int a = edges[u][0];
		int b = edges[u][1];
		dfs(a);
		dfs(b);
		if (val[u] == 0) f[u] = f[a] + f[b] + 1;
		else if (val[u] == 1) f[u] = max(f[a], f[b]);
	}
	int maximizeResistance(string circuit, vector <int> conductors) {
		for (int i = 0; i < circuit.size(); ++i) str[i] = circuit[i];
		s = str;
		int root = solve();	
		dfs(root);
		sort(conductors.begin(), conductors.end());
		reverse(conductors.begin(), conductors.end());
		int res = 0;
		for (int i = 1; i <= f[root]; ++i) res += conductors[i];
		res += conductors[0];
		return res;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, vector <int> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}";
	cout << "]" << endl;
	CircuitsConstruction *obj;
	int answer;
	obj = new CircuitsConstruction();
	clock_t startTime = clock();
	answer = obj->maximizeResistance(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	vector <int> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "BXBXX";
	int t1[] = {8,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 8;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "AAXXAXAXX";
	int t1[] = {1,1,2,8,10};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 22;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "AXBXX";
	int t1[] = {8,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 11;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "BAAXBXXBXAXXBBAXXBXXAAXXX";
	int t1[] = {17,7,21,102,56,72,88,15,9,192,16,8,30};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 454;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// hehe ~


