// File Name: B.cpp
// Author: YangYue
// Created Time: Thu Jun 19 19:20:11 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 50005;
const int uk[4][2] = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
const int INF = 100000000;

class BlockTheBlockPuzzle {
public:
	int n;
	int num(int i, int j) {
		return i * n + j;
	}
	int sink, source, Vn;
int h[MaxN], vh[MaxN];
struct Edge {
    int v, f; Edge *next, *pre;
    Edge(int v, int f, Edge *next)
        : v(v), f(f), next(next) {}
} *g[MaxN];
void addedge(int u, int v, int f) {
    g[u] = new Edge(v, f, g[u]);
    g[v] = new Edge(u, 0, g[v]);
    g[u]->pre = g[v]; g[v]->pre = g[u];
}
int sap(int u, int flow) {
    if (u == sink) return flow;
    int tmp = Vn - 1, f = 0;
    for (Edge *p = g[u]; p; p = p->next) {
        if (p->f && h[u] == h[p->v] + 1) {
            int tmpf = sap(p->v, min(flow - f, p->f));
            p->f -= tmpf, p->pre->f += tmpf, f += tmpf;
            if (h[source] == Vn || f == flow) return f;
        }
        if (p->f) tmp = min(tmp, h[p->v]);
    }
    if (!f) {
        --vh[h[u]];
        if (!vh[h[u]]) h[source] = Vn;
        else vh[h[u] = tmp + 1]++;
    }
    return f;
}
	int minimumHoles(vector <string> board) {
		n = board.size();
		PII end;
		vector<PII> start;
		for (int i = 0; i < n; ++i)
		for (int j = 0; j < n; ++j) {
			if (board[i][j] == '$') end = PII(i, j);
			if (board[i][j] == 'b') start.push_back(PII(i, j));
		}
		int tot = n * n;
		for (int x = 0; x < n; ++x)
		for (int y = 0; y < n; ++y) if ((x - end.fi) % 3 == 0 && (y - end.se) % 3 == 0 && board[x][y] != 'H') {
			if (board[x][y] == '.') addedge(num(x, y), num(x, y) + tot, 1);
			else addedge(num(x, y), num(x, y) + tot, 111111111);

			for (int d = 0; d < 4; ++d) {
				int nx = x + uk[d][0] * 3;
				int ny = y + uk[d][1] * 3;

				if (nx < 0 || nx >= n || ny < 0 || ny >= n) continue;
				int tmp = 0;
				int cnt = 0;
				if (x == nx) {
					for (int ty = y + uk[d][1]; ty != ny; ty += uk[d][1]) {
						
						if (board[x][ty] == '.') ++tmp;
						if (board[x][ty] == 'b') ++cnt;
					}
				} else {
					for (int tx = x + uk[d][0]; tx != nx; tx += uk[d][0]) {
						if (board[tx][y] == '.') ++tmp;
						if (board[tx][y] == 'b') ++cnt;
					}
				}
				if (cnt > 0) addedge(num(x, y) + tot, num(nx, ny), 111111111);
				else addedge(num(x, y) + tot, num(nx, ny), tmp);
			}
		}
		source = num(end.fi, end.se);
		sink = 2 * tot;
		for (vector<PII> :: iterator it = start.begin(); it != start.end(); ++it) {
			addedge(num(it->fi, it->se) + tot, sink, 111111111);
		}
		Vn = sink + 1;
		vh[0] = Vn;
		int res = 0;
		while (h[source] < Vn) res += sap(source, INF);
		if (res > 1000000) return -1;
		return res;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <string> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p0[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	BlockTheBlockPuzzle *obj;
	int answer;
	obj = new BlockTheBlockPuzzle();
	clock_t startTime = clock();
	answer = obj->minimumHoles(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <string> p0;
	int p1;
	
	{
	// ----- test 0 -----
	string t0[] = {"b..$","....","HHHH","HHHH"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	string t0[] = {"............H..","...............","...............","HHH$HHH.....H..","HHHHHHH........","HHHHHHHH.......","......b..H.....","...............","...............","...H..H..H.....","...............","...............","...............","...............","..............."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	string t0[] = {"............H..","...............","...............","HHH$HHH........","HHHHHHH........","HHHHHHHH.......","......b..H.....","...............","...............","...H..H..H.....","...............","...............","...............","...............","..............."};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 1;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	string t0[] = {"b..$...","...H...",".......","b..b..b","...H...",".......","b..b..b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	string t0[] = {"b..b..b","..b..b.",".......","b..$bbb",".b.....","....b..","b..b..b"};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = -1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
