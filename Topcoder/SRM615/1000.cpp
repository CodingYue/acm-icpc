// File Name: 1000.cpp
// Author: YangYue
// Created Time: Fri Apr  4 19:50:12 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MOD = (int) 1e9+7;

class AlternativePiles {
public:
	
	int f[2][55][105];
	void update(int &x, int v) {
		x += v;
		x %= MOD;
	}
	int count(string C, int M) {
		int n = C.size();
		memset(f, 0, sizeof f);
		f[0][0][0] = 1;
		int now = 0, next = 1;
		for (int i = 0; i < n; ++i) {
			char c = C[i];
			// j = zeros - ones
			// R means 0
			// G means 1
			memset(f[next], 0, sizeof f[next]);
			for (int j = 0; j <= M; ++j)
			for (int plus = 0; plus < M * 2; ++plus) if (f[now][j][plus]) {
				if (c == 'B') {
					update(f[next][j][plus], f[now][j][plus]);
					continue;
				}
				if (c == 'R') {
					if (j + 1 <= M) update(f[next][j+1][(plus + 1) % (2 * M)], f[now][j][plus]);
					continue;
				}
				if (c == 'G') {
					if (j - 1 >= 0) update(f[next][j-1][(plus + 1) % (2 * M)], f[now][j][plus]);
					continue;
				}
				if (j - 1 >= 0) update(f[next][j-1][(plus + 1) % (2 * M)], f[now][j][plus]);
				if (j + 1 <= M) update(f[next][j+1][(plus + 1) % (2 * M)], f[now][j][plus]);
				update(f[next][j][plus], f[now][j][plus]);
			}
			swap(now, next);
		}
		return f[now][0][0];
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, string p0, int p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << "\"" << p0 << "\"" << "," << p1;
	cout << "]" << endl;
	AlternativePiles *obj;
	int answer;
	obj = new AlternativePiles();
	clock_t startTime = clock();
	answer = obj->count(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	string p0;
	int p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = "WRGWWRGW";
	p1 = 2;
	p2 = 3;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = "RRGG";
	p1 = 1;
	p2 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = "BBBB";
	p1 = 5;
	p2 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = "WWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW";
	p1 = 50;
	p2 = 265470435;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = "WRWRGWWGWWWRWBWRWGWWRWBWWRGWBWGRGWWGWGRWGRWBRWBW";
	p1 = 7;
	p2 = 7400348;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// hehe ~

