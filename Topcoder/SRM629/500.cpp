// File Name: 500.cpp
// Author: YangYue
// Created Time: Tue Aug 12 23:31:58 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 1000005;
const double eps = 1e-8;
const double DINF = 1e100;
const int INF = 1000000006;
const LL LINF = 1000000000000000005ll;

void update(int &x, int v) {
	if (x == -1) {
		x = v;
		return;
	}
	x = min(x, v);
}

class CandyCollection {
public:
	int n;
	vector<int> edges[1005];
	int f[1005][2];
	int num1[1005][1005], num2[1005][1005];

	int solve(vector <int> Type1, vector <int> Number1, vector <int> Type2, vector <int> Number2) {
		n = Type1.size();

		for (int i = 0; i < n; ++i) {
			++Type1[i];
			++Type2[i];
			edges[Type1[i]].push_back(Type2[i]);
			edges[Type2[i]].push_back(Type1[i]);
			num1[Type1[i]][Type2[i]] = Number1[i];
			num2[Type1[i]][Type2[i]] = Number2[i];
			num1[Type2[i]][Type1[i]] = Number2[i];
			num2[Type2[i]][Type1[i]] = Number1[i];
		}
		int ans = -1;
		for (int i = 1; i <= n; ++i) {
			vector<int> seq;
			int x = i;
			int pre = -1;
			do {
				seq.push_back(x);
				int v = edges[x][0];
				if (v == pre) v = edges[x][1];
				pre = x;
				x = v;
			} while (x != i);
	//		for (auto x : seq) printf("%d " ,x);
		//	printf("\n");
			if (seq.size() == 2) {
				int a1 = num1[seq[0]][seq[1]];
				int a2 = num2[seq[0]][seq[1]];
				int b1 = num1[seq[1]][seq[0]];
				int b2 = num2[seq[1]][seq[0]];
				update(ans, max(b1, b2) + 1);
				update(ans, max(a1, a2) + 1); 
				update(ans, 
			}
			int tmp = -1;
			for (int t = 0; t < 2; ++t) {
				memset(f, -1, sizeof f);
				f[0][t] = 0;
				for (int i = 0; i < seq.size()-1; ++i) {
					int a1 = num1[seq[i]][seq[i+1]];
					int a2 = num2[seq[i]][seq[i+1]];
					if (f[i][1] != -1) update(f[i+1][0], f[i][1]);
					if (f[i][1] != -1) update(f[i+1][1], f[i][1] + a1 + 1);
					if (f[i][0] != -1) {
						update(f[i+1][1], f[i][0] + max(a1, a2) + 1);
						update(f[i+1][0], f[i][0] + a2 + 1);
					}
				}
				int size = seq.size()-1;
				int a1 = num1[seq[size]][seq[0]];
				int a2 = num2[seq[size]][seq[0]];
				if (t == 0) {
					if (f[size][1] != -1) update(tmp, f[size][1]);
					if (f[size][0] != -1) update(tmp, f[size][0] + a2 + 1);
				} else {
					if (f[size][1] != -1) update(tmp, f[size][1] + a1 + 1);
					if (f[size][0] != -1) update(tmp, f[size][0] + max(a1, a2) + 1);
				}
			}
			if (tmp != -1) update(ans, tmp);
		}
		return ans;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	CandyCollection *obj;
	int answer;
	obj = new CandyCollection();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	vector <int> p3;
	int p4;
	
	{
	// ----- test 0 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {2,5};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {2,5};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {0,0,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,1,2,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1,3,2};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {1,1,2,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {0,1,2,3};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,5,10,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3,0};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {8,8,10,15};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 20;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {12,9,0,16,9,18,12,3,6,0,8,2,10,6,5,2,14,10,5,13};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {895,704,812,323,334,674,665,142,712,254,869,548,645,663,758,38,860,724,742,530};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,4,7,11,15,8,18,13,17,17,19,14,7,11,4,1,15,19,3,16};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	int t3[] = {779,317,36,191,843,289,107,41,943,265,649,447,806,891,730,371,351,7,102,394};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5101;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// hehe ~


