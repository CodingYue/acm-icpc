#include <cstring>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


const int mod = (int) 1e9 + 7;

class AlmostEulerianGraph {
public:
	int h[2222];
	int f[2222];
	int g[2222];
	int C[2222][2222];
	int pow3[4444444];
	int calculateGraphs(int n) {

		memset(g, 0, sizeof g);

		for (int i = 0; i <= n; ++i) {
			C[i][0] = 1;
			for (int j = 1; j <= i; ++j) {
				C[i][j] = (C[i-1][j] + C[i-1][j-1]) % mod;
			}
		}

		pow3[0] = 1;
		for (int i = 1; i <= n*n; ++i) {
			pow3[i] = pow3[i-1] * 2 % mod;
		}

		for (int i = 1; i <= n; ++i) {
			h[i] = pow3[(i-1)*(i-2)/2];
		}

		f[1] = 1;
		g[1] = 1;

		for (int i = 2; i <= n; ++i) {
			for (int k = 1; k <= i-1; ++k) {
				g[i] += (long long) C[i-1][k-1] * f[k] % mod * h[i-k] % mod;
				g[i] %= mod;
			}
			f[i] = (h[i] - g[i] + mod) % mod;
		}
		return (long long) f[n] * (C[n][2]+1) % mod;
	}
};

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	AlmostEulerianGraph *obj;
	int answer;
	obj = new AlmostEulerianGraph();
	clock_t startTime = clock();
	answer = obj->calculateGraphs(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	int p1;
	
	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	p1 = 0;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 42;
	p1 = 29010676;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!