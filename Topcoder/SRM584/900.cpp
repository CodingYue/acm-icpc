// File Name: 900.cpp
// Author: YangYue
// Created Time: Tue Jul  8 19:53:45 2014
//headers 
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <algorithm>
#include <cstring>
#include <cmath>
#include <ctime>
#include <string>
#include <queue>
#include <set>
#include <map>
#include <iostream>
#include <vector>

using namespace std;

typedef long long LL;
typedef unsigned long long ULL;
typedef pair<int,int> PII;
typedef pair<double,double> PDD;
typedef pair<LL, LL>PLL;
typedef pair<LL,int>PLI;

#define lch(n) ((n<<1))
#define rch(n) ((n<<1)+1)
#define lowbit(i) (i&-i)
#define sqr(x) ((x)*(x))
#define fi first
#define se second
#define MP make_pair
#define PB push_back

const int MaxN = 1000005;
const double eps = 1e-8;
const double DINF = 1e100;
const int INF = 1000000006;
const LL LINF = 1000000000000000005ll;
class FoxTheLinguist {
public:
	int num(int x, int y) {
		return x * 10 + y;
	}
	int w[105][105];
	void add(int a, int b, int c) {
		swap(a, b);
		w[a][b] = min(w[a][b], c);
	}
	int tot;
	void floyd() {
		for (int k = 0; k < tot; ++k)
		for (int i = 0; i < tot; ++i)
		for (int j = 0; j < tot; ++j) w[i][j] = min(w[i][j], w[i][k] + w[k][j]);
	}
	int f[2333][105];
	int minimalHours(int n, vector <string> courseInfo) {
		tot = n * 10 + 1;
		int root = n * 10;
		for (int i = 0; i < tot; ++i)
		for (int j = 0; j < tot; ++j) {
			w[i][j] = INF;
			if ((i % 10 == 0 && j == root) || i == j) w[i][j] = 0;
		}
		
		string course = "";
		for (int i = 0; i < courseInfo.size(); ++i) course += courseInfo[i];


		course += ' ';
		int offset = 0, readCharCount = 0;
		while (1) {
			char ax, bx;
			int ay, by;
			int c;
			if (sscanf(course.c_str() + offset, "%c%d->%c%d:%04d %n", &ax, &ay, &bx, &by, &c, &readCharCount) == EOF) break;
			offset += readCharCount;
			ax -= 'A';
			bx -= 'A';
			for (int x = ay; x < 10; ++x)
			for (int y = by; y >= 0; --y) add(num(ax, x), num(bx, y), c);
		}
		floyd();
		for (int s = 0; s < 1<<n; ++s)
			for (int i = 0; i < tot; ++i) f[s][i] = INF;
		for (int i = 0; i < n; ++i) f[1<<i][num(i,9)] = 0;
		for (int s = 0; s < 1<<n; ++s) {
			for (int i = 0; i < tot; ++i) {
				for (int p = s - 1; p > 0; p = (p - 1) & s) {
					f[s][i] = min(f[s][i], f[p][i] + f[s^p][i]);
				}
				for (int v = 0; v < tot; ++v) f[s][v] = min(f[s][v], f[s][i] + w[i][v]);
			}
		}
		int ans = f[(1<<n)-1][root];
		if (ans > 10000000) return -1;
		return ans;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, vector <string> p1, bool hasAnswer, int p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << "\"" << p1[i] << "\"";
	}
	cout << "}";
	cout << "]" << endl;
	FoxTheLinguist *obj;
	int answer;
	obj = new FoxTheLinguist();
	clock_t startTime = clock();
	answer = obj->minimalHours(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	int p0;
	vector <string> p1;
	int p2;
	
	{
	// ----- test 0 -----
	p0 = 1;
	string t1[] = {"A0->A9:1000 A0->A6:0300 A3->A9:0600"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 900;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 2;
	string t1[] = {"A0->A9:1000 B0->B9:1000 A1->B9:0300 B1->A9:0200"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 1200;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 3;
	string t1[] = {"C0->A6:00","01 A3","->B9:0001 A3->C6:000","1"," C3->A9:0001 A9->C9:0001 A0->A9:9999"," B0->B9:9999 C0->C9:9999 A6->A9:9999"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 5;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 4;
	string t1[] = {"A0->A6:6666 A0->A9:9999"," B0->B6:6666 B0->B9:9999"," C0->C6:6666 C0->C9:9999"," D0->D6:6666 D0->D9:9999"," A6->B6:0666 B6->C6:0666"," C6->D6:0666 D6->A6:0666"," A9->B9:0099 B9->C9:0099"," C9->D9:0099 D9->A9:0099"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 10296;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 1;
	string t1[] = {"A0->A9:9999 A0->A9:8888"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = 8888;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	p0 = 1;
	string t1[] = {"A9->A9:0000"," A9->A0:0000"};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = -1;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
// hehe ~


