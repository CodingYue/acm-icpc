#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

typedef long long LL;


class RowGame {
public:

	LL f[555];
	LL remain[555];
	long long calc(LL a, LL b) {
		if (a <= 0) return 0;
		LL ret = (a / (2*b) + (a % (2*b) != 0));
		return ret * 2;
	}
	long long score(vector <int> board, int k) {
		int n = board.size();
		vector<LL> seq;
		for (int i = 0; i < n; ) {
			LL sum = 0;
			int j = i;
			for (j = i; j < n && (LL) board[i] * board[j] >= 0; ++j) sum += board[j];
			seq.push_back(sum);
			i = j;
		}
		
	//	for (auto &x : seq) printf("%d ", x);

		memset(f, -1, sizeof f);

		n = seq.size();
		LL Max = 0;
		LL now = 0;
		bool can = 0;
		for (int i = 0; i < n; ++i) {

			if (can) {
				if (seq[i] < 0) continue;
				
				// remain[i-2] + x * Max >= -seq[i]
				LL x = calc((-seq[i-1] - remain[i-2] - seq[i]), Max);
				f[i] = f[i-2] + x;
				remain[i] = remain[i-2] + seq[i-1] + x * Max + seq[i];
				Max = max(Max, seq[i]);
				continue;
			}

			now += seq[i];
			if (now >= 0) {
				f[i] = 1;
				remain[i] = now;
				Max = seq[i];
				can = true;
			}
		}
		long long ans = 0;
		for (int i = 0; i < n; ++i) if (f[i] != -1) {
			if (f[i] > k) continue;
			LL can = k - f[i];
			ans = max(ans, (LL) can * seq[i] + remain[i]);
		}
		return ans;
	}
};
// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, int p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << p1;
	cout << "]" << endl;
	RowGame *obj;
	long long answer;
	obj = new RowGame();
	clock_t startTime = clock();
	answer = obj->score(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	vector <int> p0;
	int p1;
	long long p2;
	
	{
	// ----- test 0 -----
	int t0[] = {0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -400000000, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 400000000;
	p2 = 5000000278ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	int t0[] = {1,2, -5, 100};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 100ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	int t0[] = {5,-6};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	p2 = 50ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	int t0[] = {10,-100,80};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 3;
	p2 = 30ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	int t0[] = {10,-100,80};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	p2 = 90ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 5 -----
	int t0[] = {-100,1,2,3,4,5,6,7,8,9,10,11,12,13,14};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 400000000;
	p2 = 41999999900ll;
	all_right = KawigiEdit_RunTest(5, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// END KAWIGIEDIT TESTING
